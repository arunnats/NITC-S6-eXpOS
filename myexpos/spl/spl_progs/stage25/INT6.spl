// --- Read System Call ---  
// Reads a word from a file into a buffer and advances the file pointer.  
// Args:  
//   - File Descriptor (int): Identifies the file.  
//   - Buffer (string/int): Stores the read word.  
// Returns:  
//   -  0: Success  
//   - -1: Invalid File Descriptor / Lock Failure  
//   - -2: End of File (EOF)  
// Process:  
//   1. Set `MODE_FLAG = 7`, switch to Kernel Stack.  
//   2. If FD = -1, call `terminal_read()`. Else:  
//   3. Validate FD (0-7), locate process resource table.  
//   4. Verify file is open, get Open File Table & Inode Table indices.  
//   5. Acquire file lock (`acquire_inode()`), fetch `lseek` position.  
//   6. If Root File: Check EOF (480), else read & update `lseek`.  
//   7. If Regular File:  
//      - Check EOF, get disk block & offset, call `buffered_read()`, update `lseek`.  
//   8. Release file lock, restore user stack, reset `MODE_FLAG`.  
//   9. Return `0` on success.  
alias userSP R0;
userSP = SP;

// storing user stack pointer in process table
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
// setting stack pointer to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;
// setting the system call number
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 7;

//get file descriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescriptorAddr R3;
alias fileDescriptor R4;

physicalPageNum = [PTBR + 2*((userSP-4)/512)]; //get physical page number of file descriptor
offset = (userSP-4)%512; //get offset of file descriptor
fileDescriptorAddr = physicalPageNum*512 + offset; //get physical address of file descriptor
fileDescriptor = [fileDescriptorAddr];

breakpoint;
// check if terminal read ( -1 )
if (fileDescriptor != -1) then 
    alias physicalAddrRetVal R5;
    physicalAddrRetVal = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;
    
    // if file descriptor is invalid, return -1
    if (fileDescriptor < 0 || fileDescriptor > 7) then
        [physicalAddrRetVal] = -1;
    else
        // get the per process resource table
        alias resourceTableEntry R6;
        resourceTableEntry = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 + RESOURCE_TABLE_OFFSET + fileDescriptor*2;

        // if its not a file, return -1
        if ([resourceTableEntry + 0] != FILE) then 
            [physicalAddrRetVal] = -1;
        else
            // get INODE index and OPEN_FILE_TABLE index
            alias inodeIndex R7;
            alias openFileEntry R8;
            openFileEntry = [resourceTableEntry + 1];
            inodeIndex = [OPEN_FILE_TABLE + openFileEntry*4 + 0];

            // acquire inide on the file
            multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
            R1 = 4;
            R2 = inodeIndex;
            R3 = [SYSTEM_STATUS_TABLE+1];
            call RESOURCE_MANAGER;
            R9 = R0;
            multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

            // if it fails, return -1
            if (R9 == -1) then 
                [physicalAddrRetVal] = -1;
            else
                // get the lseek position from OPEN_FILE_TABLE
                alias lseek R9;
                lseek = OPEN_FILE_TABLE + openFileEntry*4 + 2;
                alias wordAddress R10;
                wordAddress = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];
                wordAddress = [PTBR + 2*(wordAddress/512)]*512 + (wordAddress%512);

                // if the file is root and if the value of lseek is 480 (end of the file), return -2
                if (inodeIndex == INODE_ROOT) then
                    if ([lseek] == 480) then 
                        [physicalAddrRetVal] = -2;
                    else
                        // read the word at lseek position in memory copy of the root file
                        [wordAddress] = [ROOT_FILE + [lseek]];
                        // increment the lseek value
                        [lseek] = [lseek] + 1;
                        [physicalAddrRetVal] = 0;
                    endif;
                else
                    // if lseek value is the same as the file size, return -2
                    if ([lseek] == [INODE_TABLE + inodeIndex*16 + 2]) then 
                        [physicalAddrRetVal] = -2;
                    else
                        // get the block index and the offset value
                        alias diskBlock R11;
                        alias offset R12;
                        diskBlock = [INODE_TABLE + inodeIndex*16 + 8 + ([lseek]/512)];
                        offset =  ([lseek]%512);
                        
                        // call buffered read
                        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
                        R1 = 2;
                        R2 = diskBlock;
                        R3 = offset;
                        R4 = wordAddress;
                        call FILE_MANAGER; //buffer read
                        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
                        
                        // increase lseek value
                        [lseek] = [lseek] + 1;

                        [physicalAddrRetVal] = 0;
                    endif;
                endif;

                // release lock
                multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
                R1 = 5;
                R2 = inodeIndex;
                R3 = [SYSTEM_STATUS_TABLE+1];
                call RESOURCE_MANAGER;
                multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12);
            endif;
        endif;
    endif;
else
    alias wordAddress R5;
    alias physicalAddrRetVal R6;
    wordAddress = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];
    
    // call terminal read
    multipush(R0, R1, R2, R3, R4, R5, R6);
    alias functionNumber R1;
    alias currentPID R2;
    alias wordToRead R3;
    functionNumber = 4;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    wordToRead = wordAddress;
    call DEVICE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5, R6);

    physicalAddrRetVal = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;
    [physicalAddrRetVal] = 0; 
endif;

breakpoint;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
ireturn;