multipush(BP);

// get the current PID  -> we already set to READY in the Timer
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID*16;

// store the current pid's KPTR, PTBR and PTLR values to the process entry table 
// here we store the offset of the kernal stack pointer so the OS can relocate to User Area Page if necessary
[process_table_entry + 12] = SP%512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

// get the index of the next process to be scheduled
alias nextPID R2;
nextPID = currentPID + 1;

// find the next process which is either CREATED or READY
while ([PROCESS_TABLE + nextPID*16 + 4] != CREATED && [PROCESS_TABLE + nextPID*16 + 4] != READY && nextPID < MAX_PROC_NUM) do
    nextPID = nextPID + 1;
endwhile;

nextPID = nextPID % MAX_PROC_NUM;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + nextPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = nextPID;

// if the process is created then set its mode flag to 0, set it to runnng and take its stack pointer (since it wouldnt have been pushed)
if ([new_process_table + 4] == CREATED) then
    [new_process_table + 9] = 0;
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    ireturn;
endif;

[new_process_table + 4] = RUNNING;
multipop(BP);
return;