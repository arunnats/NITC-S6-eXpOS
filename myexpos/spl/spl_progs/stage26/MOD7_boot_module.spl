alias processTableEntry R1;
// --------------------------------- INIT PROGRAM ---------------------------------
processTableEntry = PROCESS_TABLE + 16;
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// setting page table
// ibrary
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

// code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// stack
[PTBR + 16] = 66;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

// setting process table
[processTableEntry + 1] = 1; // pid of INIT is 1 
[processTableEntry + 3] = 1;  // userID is 1
[processTableEntry + 4] = CREATED;
[processTableEntry + 11] = 77;
[processTableEntry + 12] = 0;
[processTableEntry + 13] = 8 * 512;
[processTableEntry + 14] = PTBR;
[processTableEntry + 15] = PTLR;

// physical address where the stack is stores the virtual entry point
[66 * 512] = [65 * 512 + 1];

// --------------------------------- SHELL PROGRAM ---------------------------------
processTableEntry = PROCESS_TABLE + 32;
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

// setting page table
// ibrary
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

// code
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// stack
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";

// setting process table
[processTableEntry+ 1] = 2; // pid of SHELL is 2 
[processTableEntry+ 2] = 1;  // userID is 1
[processTableEntry+ 4] = TERMINATED;
[processTableEntry+ 11] = 80;
[processTableEntry+ 12] = 0;
[processTableEntry+ 13] = 8 * 512;
[processTableEntry+ 14] = PTBR;
[processTableEntry+ 15] = PTLR;

// physical address where the stack is stores the virtual entry point
[78 * 512] = [67 * 512 + 1];

// set all other processes to TERMINATED
alias counter R0; 

counter = 3;
while (counter < MAX_PROC_NUM) do
    [PROCESS_TABLE + (counter * 16) + 4] = TERMINATED;
    counter = counter + 1;
endwhile;

counter = 0;

//initialing mem free list;
// set used  pages to 1 (first 82)
while (counter <= 82) do
    [MEMORY_FREE_LIST + counter] = 1;
    counter = counter + 1;
endwhile;

// set unused pages to 0
while (counter < NUM_MEM_PAGES) do
    [MEMORY_FREE_LIST + counter] = 0;
    counter = counter + 1;
endwhile;

// initializing DISK_MAP_TABLE
counter = 0;
while (counter < NUM_MEM_PAGES) do
    [DISK_MAP_TABLE + 10 + counter] = -1;
    counter = counter + 1;
endwhile;

// set per process resource table entries
counter = 512-16;
while(counter < 512) do
    [[PROCESS_TABLE + 16 + 11]*512 + counter   ] = -1;
    counter = counter + 1;
endwhile;

// initializing SEMAPHORE_TABLE
counter = 0;
while (counter < MAX_SEM_COUNT) do
    [SEMAPHORE_TABLE + counter * 4 + 0] = -1;
    [SEMAPHORE_TABLE + counter * 4 + 1] = 0;
    counter = counter+1;
endwhile;   

// initializing FILE_STATUS_TABLE -> locking PID and file open count is set to -1
counter = 0;
while (counter < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + counter*4 + 0] = -1;
    [FILE_STATUS_TABLE + counter*4 + 1] = -1;
    counter = counter+1;
endwhile;

//initializing BUFFER_TABLE -> block number and locking PID set to -1 and dirty bit is set to 0
counter = 0;
while (counter < MAX_BUFFER) do
    [BUFFER_TABLE + counter*4 + 0] = -1; //block number
    [BUFFER_TABLE + counter*4 + 1] = 0; //dirty bit
    [BUFFER_TABLE + counter*4 + 2] = -1; //locking pid
    counter = counter+1;
endwhile;

//initializing OPEN_FILE_TABLE
counter = 0;
while (counter < MAX_OPENFILE_NUM) do
    [OPEN_FILE_TABLE + counter*4 + 0] = -1;
    [OPEN_FILE_TABLE + counter*4 + 1] = 0;
    counter = counter+1;
endwhile;

alias diskMapTableEntry R2;
diskMapTableEntry = DISK_MAP_TABLE + 20;

// initializing DISK_MAP_TABLE
[diskMapTableEntry + 0] = -1;
[diskMapTableEntry + 1] = -1;
[diskMapTableEntry + 2] = -1;
[diskMapTableEntry + 3] = -1;
[diskMapTableEntry + 4] = 9;
[diskMapTableEntry + 5] = 10;
[diskMapTableEntry + 6] = -1;
[diskMapTableEntry + 7] = -1;
[diskMapTableEntry + 8] = -1;
[diskMapTableEntry + 9] = -1;

//initializing MEMORY_FREE_LIST 
[MEMORY_FREE_LIST + 78] = 1;
[MEMORY_FREE_LIST + 79] = 1;
[MEMORY_FREE_LIST + 80] = 1;

// set the resource tables to 0
[TERMINAL_STATUS_TABLE + 0] = 0;
[DISK_STATUS_TABLE + 0] = 0;

// currently executing process - CURRENT_PI -> start with IDLE process
[SYSTEM_STATUS_TABLE + 1] = 0;
// MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = 47;
// WAIT_MEM_COUNT
[SYSTEM_STATUS_TABLE + 3] = 0;

return;