// --- Login ---  
// Purpose: Authenticates a user and starts a new shell process.  
// Implementation:  
//   - Set `MODE_FLAG = 27` (login system call).  
//   - Switch to Kernel Stack, save SP, and set it to User Area Page.  
//   - If PID ≠ 1, return -2 (permission denied).  
//   - Retrieve user entry; if not found, return -1 (invalid username).  
//   - Encrypt input password and compare with stored hash; if mismatched, return -1.  
//   - Create a shell process with the user’s UID.  
//   - Set current process state to `WAIT_PROCESS` for shell exit.  
//   - Update `CURRENT_USER_ID` in system status.  
//   - Perform `context_switch()`, restore SP, reset `MODE_FLAG`, and return.  
alias userSP R0;
alias processTable R1;
alias username R2;
alias password R3;
alias returnAddress R4;
userSP = SP;

processTable = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);
returnAddress = [PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512;

// setting the mode flag
[processTable + 9] = 27;
// storing user stack pointer in process table
[processTable + 13] = SP;
// setting stack pointer to kernel stack
SP = [processTable + 11]*512 - 1;

// get the inputted usernamd and password
username = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
password = [[PTBR + 2*(userSP-3)/512]*512 + (userSP-3)%512];

// check if the PID is not 1
if ([SYSTEM_STATUS_TABLE + 1] != 1) then
    [returnAddress] = -2;
else
    alias counter R5;
    counter = 0;

    // get user table corresponding to username
    while(counter < MAX_USER_NUM) do
        if ([USER_TABLE + counter * 2 + 0] == username) then
            break;
        endif;
        counter = counter + 1;
    endwhile;

    // if user is found
    if (counter == MAX_USER_NUM) then
        [returnAddress] = -1;
    else
        // encrypt the inputted password
        alias encryptedPass R6;
        encryptedPass = password;
        encrypt encryptedPass;

        // check if encryped password is matching stored password
        if (encryptedPass != [USER_TABLE + counter * 2 + 1]) then
            [returnAddress] = -1;
        else
            // set state of shell to created and userID to the logged in user
            [PROCESS_TABLE + 32 + 3] = counter; //userid
            [PROCESS_TABLE + 32 + 4] = CREATED; //process state

            // sleep the logic process and wait for shell
            [PROCESS_TABLE + 16 + 4] = WAIT_PROCESS;
            [PROCESS_TABLE + 16 + 5] = 2; //waiting for SHELL to finish

            // current user id of SYSTEM_STATUS_TABLE to the user who is logging in
            [SYSTEM_STATUS_TABLE + 0] = counter;

            // call scheduler
            multipush(R0, R1, R2, R3, R4, R5, R6);
            call SCHEDULER;
            multipop(R0, R1, R2, R3, R4, R5, R6);

            [returnAddress] = 0;
        endif;
    endif;
endif;

SP = userSP;
[processTable + 9] = 0;

ireturn;