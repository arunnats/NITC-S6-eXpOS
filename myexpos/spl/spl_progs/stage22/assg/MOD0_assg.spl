alias functionNumber R1;
alias currentPID R2;

// --- Acquire Disk (Function 3) ---
// Purpose: Locks the disk device for exclusive access
// Input: PID - Process ID requesting the lock
// Implementation:
//   - If the disk is locked, set process state to (WAIT_DISK, -)
//   - Call switch_context() to yield execution
//   - Once free, lock the disk by updating Disk Status Table
if (functionNumber == 3) then
    //breakpoint;
    while ([DISK_STATUS_TABLE+0] == 1) do
        [PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;
        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);
    endwhile;

    // update disk accesses
    multipush(R0);
    alias diskAccesses R0;
    diskAccesses = SYSTEM_STATUS_TABLE + 9;
    [diskAccesses] = [diskAccesses] + 1;
    multipop(R0);

    [DISK_STATUS_TABLE + 0] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
endif;

// --- Acquire Semaphore (Function 6) ---
// Purpose: Acquires a semaphore and returns its index
// Input: PID - Process ID requesting the semaphore
// Output: Semaphore Table Index (Success) or -1 (Failure)
// Implementation:
//   - Find a free entry in Semaphore Table (PROCESS_COUNT == 0)
//   - If no free entry, return -1
//   - Set PROCESS_COUNT to 1 and LOCKING_PID to -1
//   - Return Semaphore Table Index
if (functionNumber == 6) then
    alias counter R3;
    counter = 0;

    // iterate through semaphore table and if process count field = 0, then its unused
    while (counter < MAX_SEM_COUNT && [SEMAPHORE_TABLE + counter * 4 + 1] != 0) do
        counter = counter + 1;
    endwhile;

    if(counter == MAX_SEM_COUNT) then
        R0 = -1;
    else
        // set locking field to -1 and increment process count field to 1 
        [SEMAPHORE_TABLE + counter*4 + 0] = -1;
        [SEMAPHORE_TABLE + counter*4 + 1] = 1;
        R0 = counter;
    endif;
endif;

// --- Release Semaphore (Function 7) ---
// Purpose: Releases a semaphore, unlocking blocked processes
// Input: Semaphore Table Index, PID
// Output: 0 (Success) or -1 (Failure)
// Implementation:
//   - If the semaphore is locked by the given PID, set LOCKING_PID to -1
//   - Wake up processes in (WAIT_SEMAPHORE, SEMTABLEINDEX) state
//   - Decrement PROCESS_COUNT; if 0, semaphore is free
//   - Called by Semrelease and exit system calls
if (functionNumber == 7) then
    alias semIndex R2;
    alias currentPID R3;
    alias counter R4;
    counter = 0;

    if([SEMAPHORE_TABLE + 4 * semIndex + 0] == currentPID) then
        [SEMAPHORE_TABLE + 4 * semIndex + 0] = -1;

        while (counter < MAX_PROC_NUM) do
            if ([PROCESS_TABLE + (counter * 16) + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + (counter * 16) + 5] == semIndex) then
                [PROCESS_TABLE + (counter * 16) + 4] = READY;
            endif;
            counter = counter + 1;
        endwhile;
        [SEMAPHORE_TABLE + semIndex * 4 + 1] = [SEMAPHORE_TABLE + semIndex * 4 + 1] - 1;
    endif;
endif;

// --- Acquire Terminal (Function 8) ---
// Purpose: Locks the terminal device for exclusive use
// Input: PID - Process ID requesting access
// Implementation:
//   - If the terminal is locked, set process state to (WAIT_TERMINAL, -)
//   - Call switch_context() to yield execution
//   - Once free, lock the terminal by updating Terminal Status Table
//   - Called by Terminal Read and Terminal Write functions
if (functionNumber == 8) then
    while ([TERMINAL_STATUS_TABLE + 0] == 1) do
        [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);    
    endwhile;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    [TERMINAL_STATUS_TABLE + 0] = 1;
endif;


// --- Release Terminal (Function 9) ---
// Purpose: Releases the terminal, allowing other processes to use it
// Input: PID - Process ID releasing the lock
// Output: 0 (Success) or -1 (Failure)
// Implementation:
//   - If PID does not match LOCKING_PID in Terminal Status Table, return -1
//   - Update Terminal Status Table to release lock
//   - Wake up processes in (WAIT_TERMINAL, -) state
if (functionNumber == 9) then
    if ([TERMINAL_STATUS_TABLE+1] == currentPID) then
        [TERMINAL_STATUS_TABLE+0] = 0;
        alias i R4;
        i = 1;
        while (i < MAX_PROC_NUM) do
            if ([PROCESS_TABLE + (i*16) + 4] == WAIT_TERMINAL) then
                [PROCESS_TABLE + (i*16) + 4] = READY;
            endif;
            i = i + 1;
        endwhile;
        R0 = 0;
    else
        R0 = -1;
    endif;
endif;

return;