// loading exception handler from disk to memory
loadi (2, 15);
loadi (3, 16);

// loading timer interrupt from disk to memory
loadi (4, 17);
loadi (5, 18);

// loading int 7 module from disk to memory
loadi (16,29);
loadi (17,30);

// loading int 10 module from disk to memory
loadi (22, 35);
loadi (23, 36);

// loading library code from disk to memory
loadi (63, 13);
loadi (64, 14);

// loading init program from disk to memory
loadi (65, 7);
loadi (66, 8);

// loading the idle code from disk to memory
loadi (69,11);
loadi (70,12);

// --------------------------------- IDLE PROGRAM ---------------------------------

// setting up Page Table Base Register and Page Table Length Register
PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0
PTLR = 10;

// setting up process table for IDLE
[PROCESS_TABLE + 1] = 0; // PID
[PROCESS_TABLE + 4] = CREATED; // STATE
[PROCESS_TABLE + 11] = 82; //UAPAGENO
[PROCESS_TABLE + 12] = 0; // KPTR
[PROCESS_TABLE + 13] = 8 * 512; //UPTR
[PROCESS_TABLE + 14] = PTBR; 
[PROCESS_TABLE + 15] = PTLR;

// setting up the page table for idle
// library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

// heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// physical address where the stack is stores the virtual entry point
// first entry of idle stack
[81*512] = [69*512 + 1];

// --------------------------------- INIT PROGRAM ---------------------------------

// setting process table
[PROCESS_TABLE + 16 + 1] = 1; 
[PROCESS_TABLE + 16 + 4] = RUNNING;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;

// setting page table
// ibrary
[PTBR + 20 + 0] = 63;
[PTBR + 20 + 1] = "0100";
[PTBR + 20 + 2] = 64;
[PTBR + 20 + 3] = "0100";

// heap
[PTBR + 20 + 4] = 78;
[PTBR + 20 + 5] = "0110";
[PTBR + 20 + 6] = 79;
[PTBR + 20 + 7] = "0110";

// code
[PTBR + 20 + 8] = 65;
[PTBR + 20 + 9] = "0100";
[PTBR + 20 + 10] = 66;
[PTBR + 20 + 11] = "0100";
[PTBR + 20 + 12] = -1;
[PTBR + 20 + 13] = "0000";
[PTBR + 20 + 14] = -1;
[PTBR + 20 + 15] = "0000";

// stack
[PTBR + 20 + 16] = 76;
[PTBR + 20 + 17] = "0110";
[PTBR + 20 + 18] = 77;
[PTBR + 20 + 19] = "0110";

// physical address where the stack is stores the virtual entry point
[76*512] = [65*512 + 1];

// setting up other details
PTBR = PAGE_TABLE_BASE + 20;

// currently executing process
[SYSTEM_STATUS_TABLE + 1] = 1;

// stack Ptr set to supposed logical address of Stack 
SP = 8*512;

ireturn;