// loading exception handler from disk to memory
loadi (2, 15);
loadi (3, 16);

// loading timer interrupt from disk to memory
loadi (4, 17);
loadi (5, 18);

// loading int 7 module from disk to memory
loadi (16, 29);
loadi (17, 30);

// loading int 10 module from disk to memory
loadi (22, 35);
loadi (23, 36);

// loading library code from disk to memory
loadi (63, 13);
loadi (64, 14);

// loading init program from disk to memory
loadi (65, 7);
loadi (66, 8);

// loading evennos program from disk to memory
loadi( 86, 69); // on dumping the inode user table, the evennos program is in block 69

// loading primnos program from disk to memory
loadi( 93, 70); // on dumping the inode user table, the evennos program is in block 69

// --------------------------------- ODD NOS PROGRAM (init) ---------------------------------

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

// setting page table
// ibrary
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

// code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// stack
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

// setting process table
[PROCESS_TABLE + 1 * 16 + 1] = 1; 
[PROCESS_TABLE + 1 * 16 + 4] = CREATED;
[PROCESS_TABLE + 1 * 16 + 11] = 80;
[PROCESS_TABLE + 1 * 16 + 12] = 0;
[PROCESS_TABLE + 1 * 16 + 13] = 8 * 512;
[PROCESS_TABLE + 1 * 16 + 14] = PTBR;
[PROCESS_TABLE + 1 * 16 + 15] = PTLR;

// physical address where the stack is stores the virtual entry point
[76 * 512] = [65 * 512 + 1];

// --------------------------------- EVEN NOS PROGRAM ---------------------------------

PTBR = PAGE_TABLE_BASE + (2 * 20);
PTLR = 10;

// setting page table
// ibrary
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// heap
[PTBR + 4] = 90;
[PTBR + 5] = "0110";
[PTBR + 6] = 91;
[PTBR + 7] = "0110";

// code
[PTBR + 8] = 86;
[PTBR + 9] = "0100";
[PTBR + 10] = 87;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// stack
[PTBR + 16] = 88;
[PTBR + 17] = "0110";
[PTBR + 18] = 89;
[PTBR + 19] = "0110";

// setting process table
[PROCESS_TABLE + 2 * 16 + 1] = 2; 
[PROCESS_TABLE + 2 * 16 + 4] = CREATED;
[PROCESS_TABLE + 2 * 16 + 11] = 92;
[PROCESS_TABLE + 2 * 16 + 12] = 0;
[PROCESS_TABLE + 2 * 16 + 13] = 8 * 512;
[PROCESS_TABLE + 2 * 16 + 14] = PTBR;
[PROCESS_TABLE + 2 * 16 + 15] = PTLR;

// physical address where the stack is stores the virtual entry point
[88 * 512] = [86 * 512 + 1];

// --------------------------------- PRIME NOS PROGRAM ---------------------------------

PTBR = PAGE_TABLE_BASE + (3 * 20);
PTLR = 10;

// setting page table
// ibrary
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// heap
[PTBR + 4] = 97;
[PTBR + 5] = "0110";
[PTBR + 6] = 98;
[PTBR + 7] = "0110";

// code
[PTBR + 8] = 93;
[PTBR + 9] = "0100";
[PTBR + 10] = 94;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// stack
[PTBR + 16] = 95;
[PTBR + 17] = "0110";
[PTBR + 18] = 96;
[PTBR + 19] = "0110";

// setting process table
[PROCESS_TABLE + 3 * 16 + 1] = 3; 
[PROCESS_TABLE + 3 * 16 + 4] = CREATED;
[PROCESS_TABLE + 3 * 16 + 11] = 99;
[PROCESS_TABLE + 3 * 16 + 12] = 0;
[PROCESS_TABLE + 3 * 16 + 13] = 8 * 512;
[PROCESS_TABLE + 3 * 16 + 14] = PTBR;
[PROCESS_TABLE + 3 * 16 + 15] = PTLR;

// physical address where the stack is stores the virtual entry point
[95 * 512] = [93 * 512 + 1];

//breakpoint;

return;