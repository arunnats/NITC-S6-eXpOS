alias userSP R0;
alias processTable R1;
alias syscallNumber R2;
alias resourceTable R3;
userSP = SP;

processTable = PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16);
resourceTable = [processTable + 11] * 512 + RESOURCE_TABLE_OFFSET;

// storing user stack pointer in process table
[processTable + 13] = SP;
// setting stack pointer to kernel stack
SP = [processTable + 11] * 512 - 1;

// getting the system call number from the top of the stack
syscallNumber = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];

// setting the system call number
[processTable + 9] = syscallNumber;

// --- SemLock System Call ---
// Purpose: Locks a semaphore for the process
// Input: Semaphore Descriptor (Integer)
// Output:
//   - Returns 0 on success or if already locked by the current process
//   - Returns -1 if Semaphore Descriptor is invalid
// Implementation:
//   - Set MODE_FLAG in Process Table to 19 and switch to kernel stack
//   - Validate the Semaphore Descriptor in Per Process Resource Table
//   - If invalid, return -1
//   - While semaphore is locked by another process:
//     - Set process state to (WAIT_SEMAPHORE, Semaphore Table index)
//     - Call switch_context() to yield execution
//   - Lock the semaphore by setting Locking PID to the current process
//   - Restore USER SP from Process Table and reset MODE_FLAG
//   - Return 0
if (syscallNumber == 19) then 
    alias semFD R4;
    semFD = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

    // check for validity
    if (semFD < 0 || semFD > 7 || [resourceTable + semFD * 2 + 0] != 1) then
        print "SEMLOCKERR";
        [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
    else
        alias semID R5;
        semID = [resourceTable + semFD * 2 + 1];

        // if it is locked by another process -> set to WAIT_SEMAPHORE and call the scheduler
        while ([SEMAPHORE_TABLE + semID * 4] != -1 && [SEMAPHORE_TABLE + semID * 4] != [SYSTEM_STATUS_TABLE + 1]) do
            [processTable + 4] = WAIT_SEMAPHORE;
            [processTable + 5] = semID;

            multipush(R0, R1, R2, R3, R4, R5);
            call SCHEDULER;
            multipop(R0, R1, R2, R3, R4, R5);
        endwhile;
        // setting Locking PID to the current process
        [SEMAPHORE_TABLE + semID * 4] = [SYSTEM_STATUS_TABLE + 1];
        [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;
    endif;
endif; 

// --- SemUnLock System Call ---
// Purpose: Unlocks a semaphore previously locked by the process
// Input: Semaphore Descriptor (Integer)
// Output:
//   - Returns 0 on success
//   - Returns -1 if Semaphore Descriptor is invalid
//   - Returns -2 if semaphore was not locked by the calling process
// Implementation:
//   - Set MODE_FLAG in Process Table to 20 and switch to kernel stack
//   - Validate the Semaphore Descriptor in Per Process Resource Table
//   - If invalid, return -1
//   - Check if semaphore is locked
//   - If locked by another process, return -2
//   - Unlock semaphore by setting Locking PID to -1
//   - Wake up all processes waiting for the semaphore
//   - Restore USER SP from Process Table and reset MODE_FLAG
//   - Return 0
if (syscallNumber == 20) then 
    alias semFD R4;
    semFD = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

    // check for validity
    if (semFD < 0 || semFD > 7 || [resourceTable + semFD * 2 + 0] != 1) then
        print "SEMUNLOCKERR";
        [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
    else
        alias semID R5;
        semID = [resourceTable + semFD * 2 + 1];

        if([SEMAPHORE_TABLE + semID * 4] != -1) then
            if ([SEMAPHORE_TABLE + semID * 4] != [SYSTEM_STATUS_TABLE + 1]) then
                print "SEMUNLOCKERR";
                [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -2;
            endif;

            // unlock the semaphore
            [SEMAPHORE_TABLE + semID * 4] = -1;

            // wake up all the processes waiting for the semaphore
            alias counter R6;
            counter = 0;
            while(counter < MAX_PROC_NUM) do
                if ([PROCESS_TABLE + 16 * counter + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + 16 * counter + 5] == semID) then
                    [PROCESS_TABLE + 16 * counter + 4] = READY;
                endif;
                counter = counter + 1;
            endwhile;
        endif;
    endif;
endif;

[processTable + 9] = 0;
SP = [processTable + 13];
breakpoint;
ireturn;